        std::string exePath = Sparky::FileUtils::getExecutablePath();
        std::string exeDir = Sparky::FileUtils::getDirectory(exePath);

        // Пути, где могут лежать шейдеры, в порядке приоритета
        std::vector<std::string> searchPaths = {
            exeDir + "/Engine/shaders/",          // Рядом с exe (после копирования)
            exeDir + "/../Engine/shaders/",       // Выше на один уровень (стандартная структура)
            exeDir + "/../../Engine/shaders/",    // Выше на два уровня
            TOSTRING(PROJECT_SOURCE_DIR) + std::string("/Engine/shaders/") // Путь из CMake (для разработки)
        };

        std::string vertShaderPathFound, fragShaderPathFound;
        bool found = false;

        for (const auto& path : searchPaths) {
            std::string vertPath = path + "advanced.vert.spv";
            std::string fragPath = path + "advanced.frag.spv";
            SPARKY_LOG_DEBUG("Trying shader path: " + path);
            if (Sparky::FileUtils::fileExists(vertPath) && Sparky::FileUtils::fileExists(fragPath)) {
                vertShaderPathFound = vertPath;
                fragShaderPathFound = fragPath;
                found = true;
                SPARKY_LOG_INFO("Found shaders at: " + path);
                break;
            }
        }

        if (!found) {
            throw std::runtime_error("Failed to find shader files!");
        }

        std::string vertSPVPath = vertShaderPathFound;
        std::string fragSPVPath = fragShaderPathFound;
        std::string vertShaderPath = vertShaderPathFound.substr(0, vertShaderPathFound.length() - 4); // Remove .spv extension
        std::string fragShaderPath = fragShaderPathFound.substr(0, fragShaderPathFound.length() - 4); // Remove .spv extension
        
        std::vector<uint32_t> vertShaderCode;
        std::vector<uint32_t> fragShaderCode;
        
        try {
            // Check if SPIR-V files exist
            bool vertSPVFound = Sparky::FileUtils::fileExists(vertSPVPath);
            bool fragSPVFound = Sparky::FileUtils::fileExists(fragSPVPath);
            bool vertShaderFound = Sparky::FileUtils::fileExists(vertShaderPath);
            bool fragShaderFound = Sparky::FileUtils::fileExists(fragShaderPath);
            
            SPARKY_LOG_DEBUG("Vertex shader SPV found: " + std::to_string(vertSPVFound) + " at " + vertSPVPath);
            SPARKY_LOG_DEBUG("Fragment shader SPV found: " + std::to_string(fragSPVFound) + " at " + fragSPVPath);
            SPARKY_LOG_DEBUG("Vertex shader GLSL found: " + std::to_string(vertShaderFound) + " at " + vertShaderPath);
            SPARKY_LOG_DEBUG("Fragment shader GLSL found: " + std::to_string(fragShaderFound) + " at " + fragShaderPath);
            
            // Prioritize SPIR-V files if they exist
            if (vertSPVFound && fragSPVFound) {
                // Load pre-compiled SPIR-V files
                try {
                    vertShaderCode = ShaderCompiler::loadSPIRVFromFile(vertSPVPath);
                    fragShaderCode = ShaderCompiler::loadSPIRVFromFile(fragSPVPath);
                    SPARKY_LOG_INFO("Loaded pre-compiled SPIR-V files");
                } catch (const std::exception& e) {
                    // Этот код ниже почти не должен вызываться, если вы скомпилировали шейдеры
                    SPARKY_LOG_ERROR("Failed to load pre-compiled SPIR-V, even though files exist. Error: " + std::string(e.what()));
                    throw;
                }